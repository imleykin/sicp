#lang racket

; При аппликативном порядке вычислений сначала полностью вычисляются аргументы,
; а затем происходит вычисление процедуры с вычисленными аргументами.
; В данном случае при попытке вычислить (p) интерпретатор зациклится.
;
; При нормальном порядке операнды вычисляются не сразу,
; а лишь по мере необходимости при использовании в теле процедуры.
; Поэтому сначала вычисляется предикат if, он оказывается истинным и потому функция возвращает 0,
; так и не столкнувшись с необходимостью вычислять (p).

(define (p) (p))

(define (test x y)
(if (= x 0)
0
y))

(test 0 (p))
